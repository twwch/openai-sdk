name: Release to Maven Central (with Release Drafter)

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # 检查环境变量
        if [ -z "$GPG_PRIVATE_KEY" ]; then
          echo "错误: GPG_PRIVATE_KEY 为空，请检查 GitHub Secrets 配置"
          echo "请访问: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
        fi
        
        if [ -z "$GPG_PASSPHRASE" ]; then
          echo "错误: GPG_PASSPHRASE 为空，请检查 GitHub Secrets 配置"
          exit 1
        fi
        
        # 导入 GPG 密钥
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        
        # 获取密钥 ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
        echo "GPG Key ID: $GPG_KEY_ID"
        
        # 配置 GPG
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        
        # 重启 GPG agent
        gpgconf --kill gpg-agent
        gpgconf --launch gpg-agent
    
    - name: Configure Maven settings
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0
                                      https://maven.apache.org/xsd/settings-1.2.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>${MAVEN_USERNAME}</username>
              <password>${MAVEN_PASSWORD}</password>
            </server>
          </servers>
          
          <profiles>
            <profile>
              <id>gpg</id>
              <activation>
                <activeByDefault>true</activeByDefault>
              </activation>
              <properties>
                <gpg.executable>gpg</gpg.executable>
                <gpg.passphrase>${GPG_PASSPHRASE}</gpg.passphrase>
              </properties>
            </profile>
          </profiles>
        </settings>
        EOF
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
        mvn versions:commit
    
    - name: Build and Deploy to Maven Central
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        mvn clean deploy \
          -Dgpg.passphrase="$GPG_PASSPHRASE" \
          -Dgpg.pinentry-mode=loopback \
          -Darguments=-Dgpg.passphrase="$GPG_PASSPHRASE"
    
    - name: Create Release with Release Drafter
      uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
        version: ${{ steps.get_version.outputs.VERSION }}
        publish: true
        tag: v${{ steps.get_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}